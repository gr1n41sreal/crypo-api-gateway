// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v3.12.4
// source: auth/auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const protobufPackage = 'crypo.auth';

export interface AccessToken {
  accessToken: string;
}

export interface RefreshToken {
  refreshToken: string;
}

export interface AuthorizationTokens {
  accessToken: string;
  refreshToken: string;
}

export interface LoginRequest {
  userId: number;
  userIp: string;
  userRole: number;
}

export interface LogoutByUserIdRequest {
  userId: number;
}

export interface LogoutResponse {
  success: boolean;
}

export interface VerifyResponse {
  isValid: boolean;
}

export interface SendStatus {
  success: boolean;
}

export interface Stub {}

export const CRYPO_AUTH_PACKAGE_NAME = 'crypo.auth';

export interface AuthorizationClient {
  /** Auth */

  login(request: LoginRequest): Observable<AuthorizationTokens>;

  logout(request: AccessToken): Observable<LogoutResponse>;

  logoutByUserId(request: LogoutByUserIdRequest): Observable<LogoutResponse>;

  verify(request: AccessToken): Observable<VerifyResponse>;

  refreshAccessToken(request: RefreshToken): Observable<AuthorizationTokens>;
}

export interface AuthorizationController {
  /** Auth */

  login(
    request: LoginRequest,
  ):
    | Promise<AuthorizationTokens>
    | Observable<AuthorizationTokens>
    | AuthorizationTokens;

  logout(
    request: AccessToken,
  ): Promise<LogoutResponse> | Observable<LogoutResponse> | LogoutResponse;

  logoutByUserId(
    request: LogoutByUserIdRequest,
  ): Promise<LogoutResponse> | Observable<LogoutResponse> | LogoutResponse;

  verify(
    request: AccessToken,
  ): Promise<VerifyResponse> | Observable<VerifyResponse> | VerifyResponse;

  refreshAccessToken(
    request: RefreshToken,
  ):
    | Promise<AuthorizationTokens>
    | Observable<AuthorizationTokens>
    | AuthorizationTokens;
}

export function AuthorizationControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'login',
      'logout',
      'logoutByUserId',
      'verify',
      'refreshAccessToken',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('Authorization', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('Authorization', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const AUTHORIZATION_SERVICE_NAME = 'Authorization';
