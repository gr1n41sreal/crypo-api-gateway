// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v3.12.4
// source: user/user.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';
import { Role } from './role';
import { AvailableUserFilterProps, UserRoles } from './user-enums';
import { CRYPO_AUTH_PACKAGE_NAME } from '../auth/auth';

export const protobufPackage = 'crypo.user';

export interface UserList {
  users: User[];
}

export interface User {
  id: number;
  isActive: boolean;
  email: string;
  phone: string;
  role: Role | undefined;
}

export interface CreateUserRequest {
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  password: string;
  role: UserRoles;
}

export interface GetUserByPropRequest {
  prop: AvailableUserFilterProps;
  value: string;
}

export interface GetUserByPropResponse {
  user: User | undefined;
}

export interface UpdateUserRequest {
  id: number;
  email: string;
  phone: string;
}

export interface ValidatePasswordRequest {
  phone: string;
  password: string;
}

export interface ValidatePasswordResponse {
  user: User | undefined;
  success: boolean;
}

export interface ChangeUserRoleRequest {
  id: number;
  role: UserRoles;
}

export interface SendStatus {
  success: boolean;
}

export interface Stub {}

export const CRYPO_USER_PACKAGE_NAME = 'crypo.user';

export interface UserServiceClient {
  /** User */

  createUser(request: CreateUserRequest): Observable<User>;

  getUsers(request: Stub): Observable<UserList>;

  getUserByProp(
    request: GetUserByPropRequest,
  ): Observable<GetUserByPropResponse>;

  updateUser(request: UpdateUserRequest): Observable<User>;

  validatePassword(
    request: ValidatePasswordRequest,
  ): Observable<ValidatePasswordResponse>;

  changeUserRole(request: ChangeUserRoleRequest): Observable<User>;
}

export interface UserServiceController {
  /** User */

  createUser(
    request: CreateUserRequest,
  ): Promise<User> | Observable<User> | User;

  getUsers(request: Stub): Promise<UserList> | Observable<UserList> | UserList;

  getUserByProp(
    request: GetUserByPropRequest,
  ):
    | Promise<GetUserByPropResponse>
    | Observable<GetUserByPropResponse>
    | GetUserByPropResponse;

  updateUser(
    request: UpdateUserRequest,
  ): Promise<User> | Observable<User> | User;

  validatePassword(
    request: ValidatePasswordRequest,
  ):
    | Promise<ValidatePasswordResponse>
    | Observable<ValidatePasswordResponse>
    | ValidatePasswordResponse;

  changeUserRole(
    request: ChangeUserRoleRequest,
  ): Promise<User> | Observable<User> | User;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'createUser',
      'getUsers',
      'getUserByProp',
      'updateUser',
      'validatePassword',
      'changeUserRole',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('UserService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('UserService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const USER_SERVICE_NAME = 'UserService';
